---
title: "Lab 13 Transcriptomics and analysis of RNA-Seq data"
author: "Jazz Zhang (A16149005)"
format: pdf
---

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")

head(counts)
head(metadata)
```

```{r}
dim(counts)
```

Q1. 38694 genes

```{r}
sum(metadata$dex == "control")
```

Q2. 4 control cell lines

```{r}
# calculate mean count per gene across samples
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

```{r}
#| message: false
#| warning: false
# alternative method with dplyr
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

```{r}
# Q3 rowMeans()
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowMeans(control.counts)
head(control.mean)
```


```{r}
# Q4
treated <- metadata %>% filter(dex=="treated")
treated.counts <- counts %>% select(treated$id) 
treated.mean <- rowSums(treated.counts)/4
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

```{r}
# Q5(a)
plot(meancounts, xlab="Control", ylab="Treated")
```

```{r}
#| message: false
#| warning: false
# Q5(b) geom_point()
library(ggplot2)
ggplot(meancounts)+
  aes(control.mean, treated.mean)+
  geom_point()+
  labs(x="Control", y="Treated")
```

```{r}
# Q6 log="xy"
plot(meancounts, xlab="Control", ylab="Treated", log="xy")
```

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

Q7. `arr.id=TRUE` returns the array indices. `unique()` removes duplicated rows.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)

sum(up.ind)
```

Q8. 250 up-regulated genes have log2FC>2

```{r}
sum(down.ind)
```

Q9. 367 down-regualted genes have log2FC<-2

Q10. I don't trust this data, as the statistical significance of differential 
expression can't be calculated by this method.

```{r}
#| message: false
#| warning: false
library(BiocManager)
library(DESeq2)

citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

```{r}
#| message: false
#| warning: false
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL", 
                     column="SYMBOL", 
                     multiVals="first")

head(res)
```

```{r}
# Q10
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

```{r}
ord <- order( res$padj )
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add cut-off
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
#| warning: false
#| message: false
library(EnhancedVolcano)
```

```{r}
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

```{r}
#| warning: false
#| message: false
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# gage pathway analysis
keggres = gage(foldchanges, gsets=kegg.sets.hs)

attributes(keggres)
```

```{r}
head(keggres$less, 3)
```

```{r}
#| message: false
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

```{r}
#| message: false
# PDF output
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```
![](hsa05310.pathview.png)

```{r}
#| message: false
# Q12
pathview(gene.data=foldchanges, pathway.id="hsa05332")  #GCHD
pathview(gene.data=foldchanges, pathway.id="hsa04940")  #T1D
```
![](hsa05332.pathview.png)

![](hsa04940.pathview.png)

```{r}
i <- grep("CRISPLD2", res$symbol)
res[i,]
rownames(res[i,])
```

```{r}
plotCounts(dds, gene="ENSG00000103196", intgroup="dex")
```

```{r}
# Return data
d <- plotCounts(dds, gene="ENSG00000103196", intgroup="dex", returnData=TRUE)
head(d)
```

```{r}
boxplot(count ~ dex , data=d)
```

```{r}
ggplot(d, aes(dex, count, fill=dex)) + 
  geom_boxplot() + 
  scale_y_log10() + 
  ggtitle("CRISPLD2")
```

